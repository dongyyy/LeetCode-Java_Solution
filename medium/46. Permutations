	//	Input: [1,2,3]
	//	Output:
	//	[
	//	  [1,2,3],
	//	  [1,3,2],
	//	  [2,1,3],
	//	  [2,3,1],
	//	  [3,1,2],
	//	  [3,2,1]
	//	]

	//Backtracking
  	//ex input : 1, 2, 3
	//call 0 : add 1 / 1
	//call 1 : skip 1, add 2 / 1, 2
	//call 2 : skip 1, skip 2, add 3 / 1, 2, 3
	//call 3 :  1, 2, 3 ->  ret / return
	//call 2 : remove 3 / 1, 2 / return
	//call 1 : remove 2 add 3 / 1, 3
	//call 4 : skip 1, add 2 / 1, 3, 2
	//call 5 : 1, 3, 2 -> ret / return
	//call 4 : remove 2 add 3/ 1, 3 / return
	//call 1 : remove 3 / 1 / return
	
	//call 0 : remove 1 add 2 / 2
	//call 1 : add 1 / 2, 1 
	//call 2 : skip 1, skip 2, add 3 / 2, 1, 3 
	//call 3 : 2, 1, 3 -> ret / return
	//call 2 : remove 3 / 2, 1 / return
	//call 1 : remove 1, skip 2, add 3 / 2, 3 
	//call 4 : add 1 / 2, 3, 1
	//call 5 : 2, 3, 1 -> ret / return
	//call 4 : remove 1, skip 2, skip 3 / 2, 3
	//call 2 : remove 3 / 2 / return
	//call 1 : remove 2 / {} / return
	
	//call 0 : add 3 / 3
	//...

class Solution {
    public List<List<Integer>> permute(int[] nums) {
	    	List<List<Integer>> ret = new ArrayList<>();
	    	List<Integer> temp = new ArrayList<>();
	    	backtrack(nums, ret, temp);
	    	return ret;
	}
        
         public void backtrack(int[] nums, List<List<Integer>> ret, List<Integer> temp) {
	    	//base case
	    	if(temp.size() == nums.length) {
	    		ret.add(new ArrayList<Integer>(temp));
        		// ret.add(temp); //이렇게 넣으면 temp를 얕은 복사 하는 것 
	    		return;
	    	}
	    	
	    	//reculsive case
	    	for(int num : nums) {
	    		if(temp.contains(num)) continue;
	    		temp.add(num);
	    		backtrack(nums,ret,temp);
	    		temp.remove(temp.size()-1);		
	    	}
	    }
}
