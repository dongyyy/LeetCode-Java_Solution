  //1.뒤에서부터 탐색하면서 오름차순이 깨지는 인덱스를 확인(a)
  //2.다시 뒤에서부터 탐색하면서 a보다 큰 첫번째 인덱스를 확인(b)
  //3.a와 b를 swap
  //4.a+1에서부터 끝까지를 오름차순 정렬
  //1번 실행 결과, 모두 내림차순 정렬되어있으면 a가 -1이 되어 2,3번을 건너 뛰고 4번만 반복 실행하여 오름차순 정렬
  //ex) 4,3,2,1 -> 1,2,3,4
	
	
	class Solution {
	    public void nextPermutation(int[] nums) {
	        int a = nums.length - 2;
	        while(a >= 0 && (nums[a] >= nums[a+1]) ) a--;
	        
            if(a != -1){
                int b = nums.length - 1;    
                while(nums[a] >= nums[b]) b--;
	            swap(nums, a, b);
            }
	        
	        int start = a + 1;
	        int end = nums.length -1;
	        while(start < end){
	        	swap(nums, start++, end--);
	        }
	    }
	    
		public void swap(int[] nums, int a, int b){
			int tamp = nums[a];
			nums[a] = nums[b];
			nums[b] = tamp;
		}

	}
