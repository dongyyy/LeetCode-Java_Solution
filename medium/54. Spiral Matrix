
//Layer-by-Layer

//		{}
		
//		{1, 2, 3, 0},
//		{4, 5, 6, 0},
//		{7, 8, 9, 0}
		
//		{1, 2, 3, 4},
//		{5, 6, 7, 8},
//		{9,10,11,12},
//		{13,14,15,16}
		
//		{1, 2},
//		{5, 6},
//		{9,10}
		
public List<Integer> spiralOrder(int[][] matrix) {
		List<Integer> list = new ArrayList<>();
		
		if(matrix.length == 0 ) return list;
		
		int row = 0 ;
		int column = 0 ;
        int lastRow =  matrix.length - 1; //3-1
		int lastColumn = matrix[0].length - 1;//4-1
		
		while(row <= lastRow && column <= lastColumn){
			for(int c = column ; c <= lastColumn ; c ++) {
				list.add(matrix[row][c]);
			}
			for(int r = row + 1 ; r <= lastRow ; r ++) {
				list.add(matrix[r][lastColumn]);
			}
			if(row < lastRow && column < lastColumn) {
				for(int c = lastColumn - 1  ; c > column ; c --) {
					list.add(matrix[lastRow][c]);
				}
				for(int r = lastRow  ; r > row ; r --) {
					list.add(matrix[r][column]);
				}
			}
			
			row ++;
			lastRow --;
			column ++;
			lastColumn --;
		}
        return list;
  }
