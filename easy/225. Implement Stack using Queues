  // 1 2 3 4 <- push 5
	// 5 1 2 3 4
	
	class MyStack {
		
		Queue<Integer> queue;

	    /** Initialize your data structure here. */
	    public MyStack() {
	    	queue = new LinkedList<>();
	    }
	    
	    /** Push element x onto stack. */
	    public void push(int x) {
	    	int size = queue.size();
	    	queue.offer(x);
	    	for(int i = 0 ; i < size ; i ++){
	    		queue.offer(queue.poll());
	    	}
	    }
	    
	    /** Removes the element on top of the stack and returns that element. */
	    public int pop() {
	        return queue.poll();
	    }
	    
	    /** Get the top element. */
	    public int top() {
	    	return queue.peek();
	    }
	    
	    /** Returns whether the stack is empty. */
	    public boolean empty() {
	        return queue.isEmpty();
	    }
	}
  
  
  
  
  //#2 Using Deque
  
  class MyStack {
		
		Deque<Integer> queue;

        /** Initialize your data structure here. */
        public MyStack() {
            queue = new LinkedList<>();
        }

        /** Push element x onto stack. */
        public void push(int x) {
            queue.offerFirst(x);
        }

        /** Removes the element on top of the stack and returns that element. */
        public int pop() {
            if (!queue.isEmpty()) {
                return queue.pollFirst();
            }
            return -1;
        }

        /** Get the top element. */
        public int top() {
            if (!queue.isEmpty()) {
                return queue.peekFirst();
            }
            return -1;
        }

        /** Returns whether the stack is empty. */
        public boolean empty() {
            return queue.isEmpty();
        }
	}
